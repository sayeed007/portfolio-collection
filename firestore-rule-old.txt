rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if user is an admin
    function isAdmin(auth) {
      return auth.token.email in [
        'admin@portfolio-collection.com',
      ];
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow admins to read/write all user profiles
      allow read, write: if request.auth != null && isAdmin(request.auth);
      
      // User portfolio data - users can only access their own portfolio
      match /portfolio/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Allow admins to read/write all portfolios
        allow read, write: if request.auth != null && isAdmin(request.auth);
      }
    }
    
    // Public portfolios collection - FIXED RULES
    match /portfolios/{portfolioId} {
      // Anyone can read public portfolios
      allow read: if resource.data.isPublic == true;
      
      // Allow portfolio owner to create their own portfolio entry
      allow create: if request.auth != null && 
                      request.auth.uid == portfolioId &&
                      request.resource.data.isPublic == true;
      
      // Allow portfolio owner to update their own portfolio
      allow update: if request.auth != null && 
                      request.auth.uid == portfolioId;
      
      // Allow portfolio owner to delete their own portfolio
      allow delete: if request.auth != null && 
                      request.auth.uid == portfolioId;
      
      // Allow admins to read/write all portfolios
      allow read, write: if request.auth != null && isAdmin(request.auth);
    }
    
    // Skill categories - read by authenticated users, write by admins
    match /skillCategories/{categoryId} {
      allow read: if request.auth != null;
      // Only admins can write skill categories
      allow write: if request.auth != null && isAdmin(request.auth);
    }
    
    // Category requests - users can create and read their own requests
    match /categoryRequests/{requestId} {
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.userId || isAdmin(request.auth));
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.userId || isAdmin(request.auth));
      allow delete: if request.auth != null && isAdmin(request.auth);
    }
    
    // Languages collection - read by authenticated users, write by admins only
    match /languages/{languageId} {
      allow read: if request.auth != null;
      // Only admins can create, update, delete languages
      allow write: if request.auth != null && isAdmin(request.auth);
    }
    
    // Degrees collection - read by authenticated users, write by admins only
    match /degrees/{degreeId} {
      allow read: if request.auth != null;
      // Only admins can create, update, delete degrees
      allow write: if request.auth != null && isAdmin(request.auth);
    }
    
    // Institution collection - read by authenticated users, write by admins only
    match /institutions/{institutionId} {
      allow read: if request.auth != null;
      // Only admins can create, update, delete degrees
      allow write: if request.auth != null && isAdmin(request.auth);
    }
  }
}